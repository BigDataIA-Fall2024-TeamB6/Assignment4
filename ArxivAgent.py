import logging  # Import the logging module to track program behavior
from langchain_community.retrievers import ArxivRetriever  # Import ArxivRetriever to fetch papers from arXiv
from langchain_openai import ChatOpenAI  # Import ChatOpenAI to interact with GPT-4
import os  # Import os to set environment variables
import getpass  # Import getpass for securely inputting sensitive information

# Set up the logger for tracking the flow of the program
logging.basicConfig(
    level=logging.DEBUG,  # Set the logging level to DEBUG to capture all messages
    format='%(asctime)s - %(levelname)s - %(message)s',  # Set the log format
    handlers=[logging.StreamHandler()]  # Log output to the console
)
logger = logging.getLogger()  # Get the logger instance

# Set your OpenAI API key (this will prompt you for the key)
# We're securely getting the OpenAI API key from the user, so we can use GPT-4
os.environ["OPENAI_API_KEY"] = getpass.getpass("Enter your OpenAI API key: ")
logger.info("OpenAI API key set successfully.")  # Log when the API key is set

# Initialize ArxivRetriever to fetch papers based on a query
# ArxivRetriever is used to search arXiv and get relevant papers based on the user's question
retriever = ArxivRetriever(
    load_max_docs=2,  # Limit the retrieval to 2 documents for testing
    get_full_documents=False  # Only retrieve metadata (like title, authors, abstract), not full document text
)
logger.info("ArxivRetriever initialized with a max of 2 documents.")  # Log retriever initialization

# Initialize GPT-4 model for question answering
# GPT-4 is used to provide summaries and explanations based on the retrieved paper's abstract
llm = ChatOpenAI(model="gpt-4")  # Initializing GPT-4 model to process and summarize the abstract
logger.info("GPT-4 model initialized for question answering.")  # Log GPT-4 initialization

# Define a function to get the paper ID from a question
def get_paper_id_from_question(question: str):
    """
    Given a question, this function uses ArxivRetriever to search for relevant papers
    and returns the arXiv paper ID (Entry ID) of the first relevant result.
    """
    logger.info(f"Received question: {question}")  # Log the received question
    
    # Use ArxivRetriever to search for papers related to the question
    try:
        docs = retriever.invoke(question)
        logger.debug(f"Retrieved {len(docs)} papers for the question.")  # Log how many papers were retrieved
        
        # Check if any papers were found
        if docs:
            # Retrieve the metadata (including the arXiv ID) of the first relevant paper
            paper_id = docs[0].metadata.get("Entry ID", "No ID found")
            logger.info(f"Found paper with ID: {paper_id}")  # Log the found paper ID
            return paper_id  # Return the paper ID if found
        else:
            logger.warning("No relevant paper found.")  # Log if no paper is found
            return "No relevant paper found for the question."  # Return a message if no paper is found
    except Exception as e:
        logger.error(f"Error retrieving paper: {str(e)}")  # Log any error encountered
        return f"Error retrieving paper: {str(e)}"

# Define a function to get paper ID, abstract, and summary
def get_paper_id_and_summary(question: str):
    """
    Given a question, this function retrieves the arXiv paper ID, abstract, and a summary.
    It uses GPT-4 to summarize the abstract of the first relevant paper found.
    """
    logger.info(f"Received question for summary: {question}")  # Log the received question
    
    # Use ArxivRetriever to search for papers related to the question
    try:
        docs = retriever.invoke(question)
        logger.debug(f"Retrieved {len(docs)} papers for the question.")  # Log how many papers were retrieved
        
        # Check if any papers were found
        if docs:
            # Retrieve the metadata (including the arXiv ID) and the abstract of the first relevant paper
            paper_id = docs[0].metadata.get("Entry ID", "No ID found")
            abstract = docs[0].metadata.get("Summary", "No abstract found")
            
            logger.info(f"Found paper with ID: {paper_id}")  # Log the found paper ID
            logger.debug(f"Abstract: {abstract}")  # Log the abstract of the paper
            
            # Use the LLM (e.g., GPT-4) to summarize or explain the paper based on the abstract
            llm_response = llm.invoke(f"Summarize the following paper: {abstract}")
            logger.info(f"Summary generated by GPT-4.")  # Log that the summary has been generated
            
            # Return paper ID, abstract, and summary
            return {
                "paper_id": paper_id,
                "abstract": abstract,
                "summary": llm_response
            }
        else:
            logger.warning("No relevant paper found.")  # Log if no paper is found
            return {"message": "No relevant paper found for the question."}  # Return a message if no paper is found
    except Exception as e:
        logger.error(f"Error retrieving paper or generating summary: {str(e)}")  # Log any error encountered
        return {"message": f"Error retrieving paper: {str(e)}"}

# Test the function with a question
question = "What is the ImageBind model?"
result = get_paper_id_and_summary(question)

# Print the result
if 'message' in result:
    logger.error(result['message'])  # Log error if no paper is found
else:
    logger.info(f"Paper ID: {result['paper_id']}")  # Log the paper ID
    logger.info(f"Abstract: {result['abstract']}")  # Log the abstract
    logger.info(f"Summary: {result['summary']}")  # Log the summary
